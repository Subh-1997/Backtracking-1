1.Subsets

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> result = new ArrayList<>();
    // Arrays.sort(nums);
    // backtrack(list, new ArrayList<>(), nums, 0);
    result.add(new ArrayList<>());
    for(int num:nums){
        int size=result.size();
        for(int i=0;i<size;i++){
            List<Integer> subset=new ArrayList<>(result.get(i));
            subset.add(num);
            result.add(subset);
        }
    }
    return result;
}

private void backtrack(List<List<Integer>> list , List<Integer> tempList, int [] nums, int start){
    list.add(new ArrayList<>(tempList));
    for(int i = start; i < nums.length; i++){
        tempList.add(nums[i]);
        backtrack(list, tempList, nums, i + 1);
        tempList.remove(tempList.size() - 1);
    }
}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Permutations

class Solution {
   public List<List<Integer>> permute(int[] nums) {
   List<List<Integer>> list = new ArrayList<>();
   // Arrays.sort(nums); // not necessary
   boolean[] visited = new boolean[nums.length];
   backtrack(list, new ArrayList<>(), nums,visited);
   return list;
}

private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums,boolean[] visited){
   if(tempList.size() == nums.length){
      list.add(new ArrayList<>(tempList));
   } else{
      for(int i = 0; i < nums.length; i++){ 
         // if(tempList.contains(nums[i])) continue; 
         if(visited[i]==true)continue;
         tempList.add(nums[i]);
         visited[i] = true;
         backtrack(list, tempList, nums,visited);
         tempList.remove(tempList.size() - 1);
         visited[i] = false;
      }
   }
} 
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Permutations ||

class Solution {
   public List<List<Integer>> permuteUnique(int[] nums) {
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(nums);
    backtrack(list, new ArrayList<>(), nums, new boolean[nums.length]);
    return list;
}

private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, boolean [] used){
    if(tempList.size() == nums.length){
        list.add(new ArrayList<>(tempList));
    } else{
        for(int i = 0; i < nums.length; i++){
            if(used[i] || i > 0 && nums[i] == nums[i-1] && !used[i - 1]) continue;
            used[i] = true; 
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, used);
            used[i] = false; 
            tempList.remove(tempList.size() - 1);
        }
    }
}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Subsets ||

class Solution {
 public List<List<Integer>> subsetsWithDup(int[] nums) {
    List<List<Integer>> list = new ArrayList<>();
    Arrays.sort(nums);
    backtrack(list, new ArrayList<>(), nums, 0);
    return list;
}

private void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, int start){
    list.add(new ArrayList<>(tempList));
    for(int i = start; i < nums.length; i++){
        if(i > start && nums[i] == nums[i-1]) continue; // skip duplicates
        tempList.add(nums[i]);
        backtrack(list, tempList, nums, i + 1);
        tempList.remove(tempList.size() - 1);
    }
}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.Remove Invalid Parentheses

class Solution {
    public boolean isValid(String s){
        int count = 0;
        for(char c : s.toCharArray()){
            if(c =='('){
                count++;
            }else if(c==')'){
                count--;
                if(count<0){
                    return false;
                }
            }
        }
        return count==0;
    }
    public List<String> removeInvalidParentheses(String s) {
        List<String> ans = new ArrayList<>();
        if(s.length()==0){
            ans.add("");
            return ans;
        }
        Queue<String> q = new LinkedList<>();
        q.add(s);
        Set<String> set = new HashSet<>();
         set.add(s);
        boolean level = false;
        while(!q.isEmpty()){
            
            String curr = q.poll();
            if(isValid(curr)){
               ans.add(curr);
               level = true;
            }

            if(level){
                continue;
            }

            for(int i=0;i<curr.length();i++){
                if((curr.charAt(i)=='(') || (curr.charAt(i)==')')){
                    String str = curr.substring(0,i) + curr.substring(i+1);
                    if(!set.contains(str)){
                        q.offer(str);
                        set.add(str);
                    }
                }
            }
        }
        return ans;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.Letter Combinations of a Phone Number

  public class Solution {
    	private static final String[] KEYS = { "", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };
    
    	public List<String> letterCombinations(String digits) {
    		List<String> ret = new LinkedList<String>();
            	if(digits.length()==0)
		        return ret;
    		combination("", digits, 0, ret);
    		return ret;
    	}
    
    	private void combination(String prefix, String digits, int offset, List<String> ret) {
    		if (offset >= digits.length()) {
    			ret.add(prefix);
    			return;
    		}
    		String letters = KEYS[(digits.charAt(offset) - '0')];
    		for (int i = 0; i < letters.length(); i++) {
    			combination(prefix + letters.charAt(i), digits, offset + 1, ret);
    		}
    	}
    }
